"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./contexts/PlayerContext.jsx":
/*!************************************!*\
  !*** ./contexts/PlayerContext.jsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PlayerProvider\": function() { return /* binding */ PlayerProvider; },\n/* harmony export */   \"usePlayer\": function() { return /* binding */ usePlayer; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s2, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s2 = _i.next()).done); _n = true){\n            _arr.push(_s2.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nvar _this = undefined;\n\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\nvar playerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nvar usePlayer = function() {\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(playerContext);\n};\n_s(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar PlayerProvider = function(param) {\n    var children = param.children;\n    _s1();\n    var ROWS_COUNT = 3;\n    var EQUATION_LENGTH = 3;\n    var ref9 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\"), currentGuess = ref9[0], setCurrentGuess = ref9[1];\n    var ref1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0), currentIndex = ref1[0], setCurrentIndex = ref1[1];\n    var ref2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(Array(ROWS_COUNT).fill(null)), guesses = ref2[0], setGuesses = ref2[1];\n    var ref3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), gameover = ref3[0], setGameover = ref3[1];\n    var ref4 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), win = ref4[0], setWin = ref4[1];\n    var ref5 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\"), equation = ref5[0], setEquation = ref5[1];\n    var ref6 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\"), error = ref6[0], setError = ref6[1];\n    var ref7 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), gameoverModal = ref7[0], setGameoverModal = ref7[1];\n    var ref8 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(Array(ROWS_COUNT).fill(null)), guessedResult = ref8[0], setGuessedResult = ref8[1];\n    var handleInput = function(e) {\n        var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n        var key = e.key || value;\n        if (gameover) return;\n        var eqFilter = /^[0-9+\\-*/=]|(Backspace|Enter)+$/;\n        var temp_operators = [\n            \"+\",\n            \"-\",\n            \"*\",\n            \"/\"\n        ];\n        if (!eqFilter.test(key)) {\n            return;\n        }\n        if (key === \"Enter\") {\n            if (currentGuess.length !== EQUATION_LENGTH) {\n                setError(\"You need to fill up the squares.\");\n                return;\n            }\n            /*if (\n        !currentGuess.includes(\"+\") &&\n        !currentGuess.includes(\"-\") &&\n        !currentGuess.includes(\"*\") &&\n        !currentGuess.includes(\"/\")\n      ) {\n        setError(\"The equation needs to include at least one operator.\");\n        return;\n      }*/ if (!currentGuess.includes(\"=\")) {\n                setError(\"The equation needs to include '='.\");\n                return;\n            }\n            if (currentGuess[0] === \"/\" || currentGuess[0] === \"*\") {\n                setError(\"Invalid Equation.\");\n                return;\n            }\n            if (currentGuess.split(\"=\").length - 1 !== 1) {\n                setError(\"There are multiple '=' in the equation.\");\n                return;\n            }\n            var ref = _slicedToArray(currentGuess.split(\"=\"), 2), LHS = ref[0], RHS = ref[1];\n            LHS = formatEquation(LHS);\n            RHS = formatEquation(RHS);\n            for(var i = 0; i < LHS.length; i++){\n                if (LHS[i].length > 1) {\n                    if (i === LHS.length - 1) {\n                        if (temp_operators.includes(LHS[i][0])) {\n                            setError(\"Invalid Equation.\");\n                            return;\n                        }\n                    }\n                    if (temp_operators.includes(LHS[i][0]) && temp_operators.includes(LHS[i][1])) {\n                        setError(\"Invalid Equation.\");\n                        return;\n                    }\n                }\n            }\n            for(var i1 = 0; i1 < RHS.length; i1++){\n                if (RHS[i1].length > 1) {\n                    if (i1 === RHS.length - 1) {\n                        if (temp_operators.includes(RHS[i1][0])) {\n                            setError(\"Invalid Equation.\");\n                            return;\n                        }\n                    }\n                    if (temp_operators.includes(RHS[i1][0]) && temp_operators.includes(RHS[i1][1])) {\n                        setError(\"Invalid Equation.\");\n                        return;\n                    }\n                }\n            }\n            if (calculateArray(LHS) !== calculateArray(RHS)) {\n                setError(\"Left side in not equal to the right side.\");\n                return;\n            }\n            var temp_guess = _toConsumableArray(guesses);\n            temp_guess[currentIndex] = currentGuess;\n            setGuesses(temp_guess);\n            if (currentGuess === equation) {\n                setGameover(true);\n                setWin(true);\n            } else if (currentIndex === ROWS_COUNT - 1) {\n                setGameover(true);\n            }\n            setCurrentIndex(function(prev) {\n                return prev + 1;\n            });\n            setCurrentGuess(\"\");\n            return;\n        }\n        if (key === \"Backspace\") {\n            setCurrentGuess(function(prev) {\n                return prev.slice(0, -1);\n            });\n            return;\n        }\n        if (currentGuess.length !== EQUATION_LENGTH) {\n            setCurrentGuess(function(prev) {\n                return prev + key;\n            });\n        }\n    };\n    var resetEverything = function() {\n        setCurrentGuess(\"\");\n        setCurrentIndex(0);\n        setGuesses(Array(ROWS_COUNT).fill(null));\n        setGameover(false);\n        setWin(false);\n        setEquation(\"\");\n        setError(\"\");\n        setGameoverModal(false);\n        setGuessedResult(Array(ROWS_COUNT).fill(null));\n    };\n    var generateEquation = function(length) {\n        var equationLength = length;\n        var maxOperatorCount = Math.floor(equationLength / 2 - 1);\n        var minOperatorCount = 0;\n        var possibleOperators = [\n            \"+\",\n            \"-\",\n            \"/\",\n            \"*\"\n        ];\n        var possibleNumbers = \"0123456789\";\n        var operatorsToUse = [];\n        var numbersToUse = [];\n        var randomOperatorCount = getRandomInt(minOperatorCount, maxOperatorCount);\n        for(var i = 0; i < randomOperatorCount; i++){\n            operatorsToUse.push(possibleOperators[getRandomInt(0, possibleOperators.length - 1)]);\n        }\n        if (operatorsToUse[0] !== \"-\" && operatorsToUse.length === maxOperatorCount) {\n            operatorsToUse.splice(-1, 1);\n        }\n        var LHSNumberCount = maxOperatorCount > 1 && operatorsToUse.length === maxOperatorCount ? operatorsToUse.length : getRandomInt(operatorsToUse.length + 1, equationLength - operatorsToUse.length - 2);\n        for(var i2 = 0; i2 < LHSNumberCount; i2++){\n            numbersToUse.push(possibleNumbers[getRandomInt(0, possibleNumbers.length - 1)]);\n        }\n        var LHSequationLength = operatorsToUse.length + LHSNumberCount;\n        var LHSequation = Array(LHSequationLength);\n        for(var i3 = 0; i3 < LHSequationLength; i3++){\n            if (operatorsToUse.length === 0) break;\n            if (operatorsToUse.length === maxOperatorCount) {\n                LHSequation[i3] = operatorsToUse[0];\n                operatorsToUse.splice(0, 1);\n                continue;\n            }\n            if (i3 !== 0 && i3 !== LHSequationLength - 1) {\n                if (!possibleOperators.includes(LHSequation[i3 - 1])) {\n                    LHSequation[i3] = operatorsToUse[0];\n                    operatorsToUse.splice(0, 1);\n                }\n            }\n        }\n        for(var j = 0; j < LHSequationLength; j++){\n            if (numbersToUse.length === 0) break;\n            if (LHSequation[j] === undefined) {\n                LHSequation[j] = numbersToUse[0];\n                numbersToUse.splice(0, 1);\n            }\n        }\n        var eqString = LHSequation.join(\"\");\n        var formattedEqArray = formatEquation(eqString);\n        for(var i4 = 0; i4 < formattedEqArray.length; i4++){\n            if (formattedEqArray[i4].length > 1 && formattedEqArray[i4][0] === \"0\") {\n                var temp_number = \"\";\n                for(var j1 = 0; j1 < formattedEqArray[i4].length; j1++){\n                    temp_number += getRandomInt(1, 9).toString();\n                }\n                formattedEqArray.splice(i4, 1, temp_number);\n            }\n        }\n        var RHSAnswer = calculateArray(formatEquation(eqString));\n        if (!RHSAnswer) return generateEquation(length);\n        var finalEquation = eqString + \"=\" + RHSAnswer;\n        if (finalEquation.length !== equationLength) return generateEquation(length);\n        return finalEquation;\n    };\n    var formatEquation = function(expression) {\n        var copy = expression;\n        expression = expression.replace(/[0-9]+/g, \"#\");\n        var numbers = copy.split(/[^0-9\\.]+/).filter(function(n) {\n            return n;\n        });\n        var operators = expression.split(\"#\").filter(function(n) {\n            return n;\n        });\n        var result = [];\n        for(var i = 0; i < numbers.length; i++){\n            if (operators.length === numbers.length) {\n                result.push(operators[i]);\n                result.push(numbers[i]);\n            } else {\n                result.push(numbers[i]);\n                if (i < operators.length) result.push(operators[i]);\n            }\n        }\n        return result;\n    };\n    var calculateArray = function(arrayEquation) {\n        var result;\n        var temp_array = _toConsumableArray(arrayEquation);\n        var divide = temp_array.indexOf(\"/\");\n        var multiply = temp_array.indexOf(\"*\");\n        var substract = temp_array.indexOf(\"-\");\n        var add = temp_array.indexOf(\"+\");\n        if (temp_array.length === 1) return parseInt(temp_array[0]);\n        if (add === 0) {\n            temp_array.splice(add, 1);\n        }\n        if (substract === 0) {\n            if (temp_array[substract + 1] === \"0\") {\n                temp_array.splice(substract + 1, 1, getRandomInt(1, 9).toString());\n            }\n            result = parseInt(temp_array[substract] + temp_array[substract + 1]);\n            temp_array.splice(substract, 2, result);\n        } else if (divide > 0) {\n            if (parseInt(temp_array[divide + 1]) === 0) return false;\n            if (parseInt(temp_array[divide - 1]) % parseInt(temp_array[divide + 1]) !== 0) return false;\n            result = parseInt(temp_array[divide - 1]) / parseInt(temp_array[divide + 1]);\n            temp_array.splice(divide - 1, 3, result);\n        } else if (multiply > 0) {\n            result = parseInt(temp_array[multiply - 1]) * parseInt(temp_array[multiply + 1]);\n            temp_array.splice(multiply - 1, 3, result);\n        } else if (add > 0) {\n            result = parseInt(temp_array[add - 1]) + parseInt(temp_array[add + 1]);\n            temp_array.splice(add - 1, 3, result);\n        } else if (substract > 0) {\n            result = parseInt(temp_array[substract - 1]) - parseInt(temp_array[substract + 1]);\n            temp_array.splice(substract - 1, 3, result);\n        }\n        return calculateArray(temp_array);\n    };\n    var getRandomInt = function(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1) + min); /* for min and max inclusive */ \n    };\n    var values = {\n        generateEquation: generateEquation,\n        ROWS_COUNT: ROWS_COUNT,\n        EQUATION_LENGTH: EQUATION_LENGTH,\n        currentIndex: currentIndex,\n        currentGuess: currentGuess,\n        handleInput: handleInput,\n        guesses: guesses,\n        equation: equation,\n        setEquation: setEquation,\n        error: error,\n        setError: setError,\n        gameover: gameover,\n        win: win,\n        guessedResult: guessedResult,\n        setGuessedResult: setGuessedResult,\n        gameoverModal: gameoverModal,\n        setGameoverModal: setGameoverModal,\n        resetEverything: resetEverything\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(playerContext.Provider, {\n        value: values,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/lucasklenovich/Documents/GitHub/ngt1/contexts/PlayerContext.jsx\",\n        lineNumber: 323,\n        columnNumber: 5\n    }, _this);\n};\n_s1(PlayerProvider, \"5v9xnvGDx2ysOMyYGYJq6NoNOVk=\");\n_c = PlayerProvider;\n\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./contexts/PlayerContext.jsx\n");

/***/ })

});